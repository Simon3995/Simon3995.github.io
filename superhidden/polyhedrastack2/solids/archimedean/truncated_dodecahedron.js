// shape definition
// archimedean - truncated dodecahedron 

const TRDO1 = (1 + Math.sqrt(5)) / 2; // used for truncated dodecahedron; NB equals PHI
const TRDO2 = (2 + Math.sqrt(5)) / 2; // used for truncated dodecahedron
const TRDO3 = (3 + Math.sqrt(5)) / 2; // used for truncated dodecahedron
const TRDO4 = (5 + (3 * Math.sqrt(5))) / 4; // used for truncated dodecahedron

export default {
    "Truncated Dodecahedron": {
        category: "Archimedean",
        verts: [
            [0, 0.5, TRDO4],
            [0, -0.5, TRDO4],
            [0, 0.5, -TRDO4],
            [0, -0.5, -TRDO4],
            [TRDO4, 0, 0.5],
            [TRDO4, 0, -0.5],
            [-TRDO4, 0, 0.5],
            [-TRDO4, 0, -0.5],
            [0.5, TRDO4, 0],
            [-0.5, TRDO4, 0],
            [0.5, -TRDO4, 0],
            [-0.5, -TRDO4, 0],

            [0.5, TRDO3 / 2, TRDO3],
            [0.5, TRDO3 / 2, -TRDO3],
            [0.5, -TRDO3 / 2, TRDO3],
            [0.5, -TRDO3 / 2, -TRDO3],
            [-0.5, TRDO3 / 2, TRDO3],
            [-0.5, TRDO3 / 2, -TRDO3],
            [-0.5, -TRDO3 / 2, TRDO3],
            [-0.5, -TRDO3 / 2, -TRDO3],
            [TRDO3, 0.5, TRDO3 / 2],
            [-TRDO3, 0.5, TRDO3 / 2],
            [TRDO3, 0.5, -TRDO3 / 2],
            [-TRDO3, 0.5, -TRDO3 / 2],
            [TRDO3, -0.5, TRDO3 / 2],
            [-TRDO3, -0.5, TRDO3 / 2],
            [TRDO3, -0.5, -TRDO3 / 2],
            [-TRDO3, -0.5, -TRDO3 / 2],
            [TRDO3 / 2, TRDO3, 0.5],
            [TRDO3 / 2, -TRDO3, 0.5],
            [-TRDO3 / 2, TRDO3, 0.5],
            [-TRDO3 / 2, -TRDO3, 0.5],
            [TRDO3 / 2, TRDO3, -0.5],
            [TRDO3 / 2, -TRDO3, -0.5],
            [-TRDO3 / 2, TRDO3, -0.5],
            [-TRDO3 / 2, -TRDO3, -0.5],

            [TRDO3 / 2, TRDO1, TRDO2],
            [TRDO3 / 2, TRDO1, -TRDO2],
            [TRDO3 / 2, -TRDO1, TRDO2],
            [TRDO3 / 2, -TRDO1, -TRDO2],
            [-TRDO3 / 2, TRDO1, TRDO2],
            [-TRDO3 / 2, TRDO1, -TRDO2],
            [-TRDO3 / 2, -TRDO1, TRDO2],
            [-TRDO3 / 2, -TRDO1, -TRDO2],
            [TRDO2, TRDO3 / 2, TRDO1],
            [-TRDO2, TRDO3 / 2, TRDO1],
            [TRDO2, TRDO3 / 2, -TRDO1],
            [-TRDO2, TRDO3 / 2, -TRDO1],
            [TRDO2, -TRDO3 / 2, TRDO1],
            [-TRDO2, -TRDO3 / 2, TRDO1],
            [TRDO2, -TRDO3 / 2, -TRDO1],
            [-TRDO2, -TRDO3 / 2, -TRDO1],
            [TRDO1, TRDO2, TRDO3 / 2],
            [TRDO1, -TRDO2, TRDO3 / 2],
            [-TRDO1, TRDO2, TRDO3 / 2],
            [-TRDO1, -TRDO2, TRDO3 / 2],
            [TRDO1, TRDO2, -TRDO3 / 2],
            [TRDO1, -TRDO2, -TRDO3 / 2],
            [-TRDO1, TRDO2, -TRDO3 / 2],
            [-TRDO1, -TRDO2, -TRDO3 / 2]

        ],
        faces: [
            [0, 12, 16],
            [1, 18, 14],
            [2, 17, 13],
            [3, 15, 19],
            [4, 20, 24],
            [5, 26, 22],
            [6, 25, 21],
            [7, 23, 27],
            [8, 28, 32],
            [9, 34, 30],
            [10, 33, 29],
            [11, 31, 35],
            [36, 44, 52],
            [37, 56, 46],
            [38, 53, 48],
            [39, 50, 57],
            [40, 54, 45],
            [41, 47, 58],
            [42, 49, 55],
            [43, 59, 51],
            [6, 21, 45, 54, 30, 34, 58, 47, 23, 7],
            [6, 7, 27, 51, 59, 35, 31, 55, 49, 25],
            [10, 29, 53, 38, 14, 18, 42, 55, 31, 11],
            [2, 13, 37, 46, 22, 26, 50, 39, 15, 3],
            [2, 3, 19, 43, 51, 27, 23, 47, 41, 17],
            [10, 11, 35, 59, 43, 19, 15, 39, 57, 33],
            [8, 32, 56, 37, 13, 17, 41, 58, 34, 9],
            [8, 9, 30, 54, 40, 16, 12, 36, 52, 28],
            [0, 16, 40, 45, 21, 25, 49, 42, 18, 1],
            [0, 1, 14, 38, 48, 24, 20, 44, 36, 12],
            [4, 24, 48, 53, 29, 33, 57, 50, 26, 5],
            [4, 5, 22, 46, 56, 32, 28, 52, 44, 20]
        ]
    }
}